Elm.Example = Elm.Example || {};
Elm.Example.Main = Elm.Example.Main || {};
Elm.Example.Main.make = function (_elm) {
   "use strict";
   _elm.Example = _elm.Example || {};
   _elm.Example.Main = _elm.Example.Main || {};
   if (_elm.Example.Main.values) return _elm.Example.Main.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $Html$Widgets = Elm.Html.Widgets.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm),
   $Window = Elm.Window.make(_elm);
   var _op = {};
   var convertToInt = function (digit) {    return A2($Maybe.withDefault,0,$Result.toMaybe($String.toInt(digit)));};
   var knobView = F2(function (address,sample) {
      var properties = sample.properties;
      return A2($Html.div,
      _U.list([$Html$Attributes.style(_U.list([sample.isVisible ? {ctor: "_Tuple2",_0: "",_1: ""} : {ctor: "_Tuple2",_0: "display",_1: "none"}]))]),
      _U.list([A2($Html.div,_U.list([]),_U.list([$Html.text("KNOB VIEW")]))
              ,A2($Html.div,
              _U.list([$Html$Attributes.style(_U.list([{ctor: "_Tuple2",_0: "width",_1: "400px"},{ctor: "_Tuple2",_0: "height",_1: "400px"}]))]),
              _U.list([A2($Html$Widgets.knob,sample.properties,sample.style)]))]));
   });
   var update = F2(function (action,appState) {
      var _p0 = action;
      switch (_p0.ctor)
      {case "NoOp": return appState;
         case "SeventSegmentTextChange": var sevenSegmentSample$ = appState.sevenSegmentSample;
           var properties$ = sevenSegmentSample$.properties;
           return _U.update(appState,{sevenSegmentSample: _U.update(sevenSegmentSample$,{properties: _U.update(properties$,{digits: _p0._0})})});
         case "SeventSegmentPointsChange": var _p1 = _p0._0;
           var convert = function (digit) {    return A2($Maybe.withDefault,-1,$Result.toMaybe($String.toInt(digit)));};
           var pointIndexes$ = A2($List.filter,
           function (y) {
              return !_U.eq(y,-1);
           },
           A2($List.map,function (x) {    return convert(x);},A2($String.split,",",_p1)));
           var sevenSegmentSample$ = appState.sevenSegmentSample;
           var properties$ = sevenSegmentSample$.properties;
           return _U.update(appState,
           {sevenSegmentSample: _U.update(sevenSegmentSample$,{properties: _U.update(properties$,{pointIndexes: pointIndexes$}),pointIndexesText: _p1})});
         case "SeventSegmentColonsChange": var _p2 = _p0._0;
           var convert = function (digit) {    return A2($Maybe.withDefault,-1,$Result.toMaybe($String.toInt(digit)));};
           var colonIndexes$ = A2($List.filter,
           function (y) {
              return !_U.eq(y,-1);
           },
           A2($List.map,function (x) {    return convert(x);},A2($String.split,",",_p2)));
           var sevenSegmentSample$ = appState.sevenSegmentSample;
           var properties$ = sevenSegmentSample$.properties;
           return _U.update(appState,
           {sevenSegmentSample: _U.update(sevenSegmentSample$,{properties: _U.update(properties$,{colonIndexes: colonIndexes$}),colonIndexesText: _p2})});
         case "SegmentedBarGraphValueChange": var segmentedBarGraphSample$ = appState.segmentedBarGraphSample;
           var properties$ = segmentedBarGraphSample$.properties;
           return _U.update(appState,
           {segmentedBarGraphSample: _U.update(segmentedBarGraphSample$,{properties: _U.update(properties$,{currentValue: convertToInt(_p0._0)})})});
         default: var simulatedAnalogMeterSample$ = appState.simulatedAnalogMeterSample;
           var properties$ = simulatedAnalogMeterSample$.properties;
           return _U.update(appState,
           {simulatedAnalogMeterSample: _U.update(simulatedAnalogMeterSample$,{properties: _U.update(properties$,{currentValue: convertToInt(_p0._0)})})});}
   });
   var SimulatedAnalogMeterValueChange = function (a) {    return {ctor: "SimulatedAnalogMeterValueChange",_0: a};};
   var simulatedAnalogMeterView = F2(function (address,sample) {
      var properties = sample.properties;
      return A2($Html.div,
      _U.list([$Html$Attributes.style(_U.list([sample.isVisible ? {ctor: "_Tuple2",_0: "",_1: ""} : {ctor: "_Tuple2",_0: "display",_1: "none"}]))]),
      _U.list([A2($Html.div,_U.list([]),_U.list([$Html.text("SIMULATED ANALOG METER VIEW")]))
              ,A2($Html.div,
              _U.list([$Html$Attributes.style(_U.list([{ctor: "_Tuple2",_0: "width",_1: "400px"},{ctor: "_Tuple2",_0: "height",_1: "136px"}]))]),
              _U.list([A2($Html$Widgets.simulatedAnalogMeter,sample.properties,sample.style)]))
              ,A2($Html.div,
              _U.list([]),
              _U.list([$Html.text("VALUE")
                      ,A2($Html.input,
                      _U.list([$Html$Attributes.type$("text")
                              ,$Html$Attributes.value($Basics.toString(properties.currentValue))
                              ,A3($Html$Events.on,
                              "input",
                              $Html$Events.targetValue,
                              function (_p3) {
                                 return A2($Signal.message,address,SimulatedAnalogMeterValueChange(_p3));
                              })]),
                      _U.list([]))]))]));
   });
   var SegmentedBarGraphValueChange = function (a) {    return {ctor: "SegmentedBarGraphValueChange",_0: a};};
   var segmentedBarGraphView = F2(function (address,segmentedBarGraphSample) {
      var properties = segmentedBarGraphSample.properties;
      return A2($Html.div,
      _U.list([$Html$Attributes.style(_U.list([segmentedBarGraphSample.isVisible ? {ctor: "_Tuple2",_0: "",_1: ""} : {ctor: "_Tuple2"
                                                                                                                     ,_0: "display"
                                                                                                                     ,_1: "none"}]))]),
      _U.list([A2($Html.div,_U.list([]),_U.list([$Html.text("SEGMENTED BAR GRAPH SAMPLE")]))
              ,A2($Html.div,
              _U.list([$Html$Attributes.style(_U.list([{ctor: "_Tuple2",_0: "width",_1: "400px"},{ctor: "_Tuple2",_0: "height",_1: "68px"}]))]),
              _U.list([A2($Html$Widgets.segmentedBarGraph,segmentedBarGraphSample.properties,segmentedBarGraphSample.style)]))
              ,A2($Html.div,
              _U.list([]),
              _U.list([$Html.text("VALUE")
                      ,A2($Html.input,
                      _U.list([$Html$Attributes.type$("text")
                              ,$Html$Attributes.value($Basics.toString(properties.currentValue))
                              ,A3($Html$Events.on,
                              "input",
                              $Html$Events.targetValue,
                              function (_p4) {
                                 return A2($Signal.message,address,SegmentedBarGraphValueChange(_p4));
                              })]),
                      _U.list([]))]))]));
   });
   var SeventSegmentColonsChange = function (a) {    return {ctor: "SeventSegmentColonsChange",_0: a};};
   var SeventSegmentPointsChange = function (a) {    return {ctor: "SeventSegmentPointsChange",_0: a};};
   var SeventSegmentTextChange = function (a) {    return {ctor: "SeventSegmentTextChange",_0: a};};
   var sevenSegmentSampleView = F2(function (address,sevenSegmentSample$) {
      var properties = sevenSegmentSample$.properties;
      return A2($Html.div,
      _U.list([$Html$Attributes.style(_U.list([sevenSegmentSample$.isVisible ? {ctor: "_Tuple2",_0: "",_1: ""} : {ctor: "_Tuple2"
                                                                                                                 ,_0: "display"
                                                                                                                 ,_1: "none"}]))]),
      _U.list([A2($Html.div,_U.list([]),_U.list([$Html.text("SEVENT SEGMENT EXAMPLE")]))
              ,A2($Html.div,
              _U.list([$Html$Attributes.style(_U.list([{ctor: "_Tuple2",_0: "width",_1: "400px"},{ctor: "_Tuple2",_0: "height",_1: "68px"}]))]),
              _U.list([A2($Html$Widgets.sevenSegment,sevenSegmentSample$.properties,sevenSegmentSample$.style)]))
              ,A2($Html.div,
              _U.list([]),
              _U.list([$Html.text("TEXT")
                      ,A2($Html.input,
                      _U.list([$Html$Attributes.type$("text")
                              ,$Html$Attributes.value(properties.digits)
                              ,A3($Html$Events.on,
                              "input",
                              $Html$Events.targetValue,
                              function (_p5) {
                                 return A2($Signal.message,address,SeventSegmentTextChange(_p5));
                              })]),
                      _U.list([]))]))
              ,A2($Html.div,
              _U.list([]),
              _U.list([$Html.text("POINTS")
                      ,A2($Html.input,
                      _U.list([$Html$Attributes.type$("text")
                              ,$Html$Attributes.value(sevenSegmentSample$.pointIndexesText)
                              ,A3($Html$Events.on,
                              "input",
                              $Html$Events.targetValue,
                              function (_p6) {
                                 return A2($Signal.message,address,SeventSegmentPointsChange(_p6));
                              })]),
                      _U.list([]))]))
              ,A2($Html.div,
              _U.list([]),
              _U.list([$Html.text("COLONS")
                      ,A2($Html.input,
                      _U.list([$Html$Attributes.type$("text")
                              ,$Html$Attributes.value(sevenSegmentSample$.colonIndexesText)
                              ,A3($Html$Events.on,
                              "input",
                              $Html$Events.targetValue,
                              function (_p7) {
                                 return A2($Signal.message,address,SeventSegmentColonsChange(_p7));
                              })]),
                      _U.list([]))]))]));
   });
   var appView = F3(function (address,appState,_p8) {
      var _p9 = _p8;
      return A3($Html.toElement,
      _p9._0,
      _p9._1,
      A2($Html.div,
      _U.list([]),
      _U.list([A2(sevenSegmentSampleView,address,appState.sevenSegmentSample)
              ,A2(segmentedBarGraphView,address,appState.segmentedBarGraphSample)
              ,A2(simulatedAnalogMeterView,address,appState.simulatedAnalogMeterSample)
              ,A2(knobView,address,appState.knobSample)])));
   });
   var NoOp = {ctor: "NoOp"};
   var actions = $Signal.mailbox(NoOp);
   var mergedActions = $Signal.mergeMany(_U.list([actions.signal]));
   var defaultKnobSample = {isVisible: true,properties: $Html$Widgets.defaultKnobProperties,style: $Html$Widgets.defaultKnobStyle};
   var defaultSimulatedAnalogMeterSample = {isVisible: true
                                           ,properties: $Html$Widgets.defaultSimulatedAnalogMeterProperties
                                           ,style: $Html$Widgets.defaultSimulatedAnalogMeterStyle};
   var defaultSegmentedBarGraphSample = {isVisible: true
                                        ,properties: $Html$Widgets.defaultSegmentedBarGraphProperties
                                        ,style: $Html$Widgets.defaultSegmentBarGraphStyle};
   var defaultSevenSegmentSample = {properties: $Html$Widgets.defaultSevenSegmentProperties
                                   ,style: $Html$Widgets.defaultSevenSegmentStyle
                                   ,isVisible: true
                                   ,pointIndexesText: A2($String.join,
                                   ",",
                                   A2($List.map,function (i) {    return $Basics.toString(i);},$Html$Widgets.defaultSevenSegmentProperties.pointIndexes))
                                   ,colonIndexesText: A2($String.join,
                                   ",",
                                   A2($List.map,function (i) {    return $Basics.toString(i);},$Html$Widgets.defaultSevenSegmentProperties.colonIndexes))};
   var defaultAppState = {sevenSegmentSample: defaultSevenSegmentSample
                         ,segmentedBarGraphSample: defaultSegmentedBarGraphSample
                         ,simulatedAnalogMeterSample: defaultSimulatedAnalogMeterSample
                         ,knobSample: defaultKnobSample};
   var appState = A3($Signal.foldp,update,defaultAppState,mergedActions);
   var main = A3($Signal.map2,appView(actions.address),appState,$Window.dimensions);
   var KnobSample = F3(function (a,b,c) {    return {isVisible: a,properties: b,style: c};});
   var SimulatedAnalogMeterSample = F3(function (a,b,c) {    return {isVisible: a,properties: b,style: c};});
   var SegmentedBarGraphSample = F3(function (a,b,c) {    return {isVisible: a,properties: b,style: c};});
   var SevenSegmentSample = F5(function (a,b,c,d,e) {    return {properties: a,style: b,isVisible: c,pointIndexesText: d,colonIndexesText: e};});
   var AppState = F4(function (a,b,c,d) {    return {sevenSegmentSample: a,segmentedBarGraphSample: b,simulatedAnalogMeterSample: c,knobSample: d};});
   return _elm.Example.Main.values = {_op: _op
                                     ,AppState: AppState
                                     ,SevenSegmentSample: SevenSegmentSample
                                     ,SegmentedBarGraphSample: SegmentedBarGraphSample
                                     ,SimulatedAnalogMeterSample: SimulatedAnalogMeterSample
                                     ,KnobSample: KnobSample
                                     ,defaultAppState: defaultAppState
                                     ,defaultSevenSegmentSample: defaultSevenSegmentSample
                                     ,defaultSegmentedBarGraphSample: defaultSegmentedBarGraphSample
                                     ,defaultSimulatedAnalogMeterSample: defaultSimulatedAnalogMeterSample
                                     ,defaultKnobSample: defaultKnobSample
                                     ,NoOp: NoOp
                                     ,SeventSegmentTextChange: SeventSegmentTextChange
                                     ,SeventSegmentPointsChange: SeventSegmentPointsChange
                                     ,SeventSegmentColonsChange: SeventSegmentColonsChange
                                     ,SegmentedBarGraphValueChange: SegmentedBarGraphValueChange
                                     ,SimulatedAnalogMeterValueChange: SimulatedAnalogMeterValueChange
                                     ,update: update
                                     ,main: main
                                     ,appState: appState
                                     ,actions: actions
                                     ,mergedActions: mergedActions
                                     ,appView: appView
                                     ,sevenSegmentSampleView: sevenSegmentSampleView
                                     ,segmentedBarGraphView: segmentedBarGraphView
                                     ,simulatedAnalogMeterView: simulatedAnalogMeterView
                                     ,knobView: knobView
                                     ,convertToInt: convertToInt};
};