Elm.Html = Elm.Html || {};
Elm.Html.Widgets = Elm.Html.Widgets || {};
Elm.Html.Widgets.make = function (_elm) {
   "use strict";
   _elm.Html = _elm.Html || {};
   _elm.Html.Widgets = _elm.Html.Widgets || {};
   if (_elm.Html.Widgets.values) return _elm.Html.Widgets.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm),
   $Svg = Elm.Svg.make(_elm),
   $Svg$Attributes = Elm.Svg.Attributes.make(_elm);
   var _op = {};
   var knobSegment = F6(function (properties,style,innerRadius,outerRadius,_p0,angle) {
      var _p1 = _p0;
      var _p5 = _p1._1;
      var _p4 = _p1._0;
      var indexedAngle = (angle + properties.rangeAngleMin) * ($Basics.pi / 180);
      var _p2 = $Basics.fromPolar({ctor: "_Tuple2",_0: innerRadius,_1: indexedAngle});
      var x1$ = _p2._0;
      var y1$ = _p2._1;
      var _p3 = $Basics.fromPolar({ctor: "_Tuple2",_0: outerRadius,_1: indexedAngle});
      var x2$ = _p3._0;
      var y2$ = _p3._1;
      return A2($Svg.g,
      _U.list([]),
      _U.list([A2($Svg.line,
      _U.list([$Svg$Attributes.x1($Basics.toString(x1$ + _p4))
              ,$Svg$Attributes.y1($Basics.toString(y1$ + _p5))
              ,$Svg$Attributes.x2($Basics.toString(x2$ + _p4))
              ,$Svg$Attributes.y2($Basics.toString(y2$ + _p5))
              ,$Svg$Attributes.$class($Basics.toString(angle))
              ,$Svg$Attributes.style(A2($Basics._op["++"],"stroke:",A2($Basics._op["++"],style.segmentColor,";stroke-width:2")))]),
      _U.list([]))]));
   });
   var knobSegmentWithLabel = F7(function (properties,style,innerRadius,outerRadius,_p6,angle,labelValue) {
      var _p7 = _p6;
      var _p12 = _p7._1;
      var _p11 = _p7._0;
      var piAngle = (angle + properties.rangeAngleMin) * ($Basics.pi / 180);
      var _p8 = $Basics.fromPolar({ctor: "_Tuple2",_0: innerRadius,_1: piAngle});
      var x1$ = _p8._0;
      var y1$ = _p8._1;
      var _p9 = $Basics.fromPolar({ctor: "_Tuple2",_0: outerRadius,_1: piAngle});
      var x2$ = _p9._0;
      var y2$ = _p9._1;
      var labelRadius = outerRadius + 10;
      var _p10 = $Basics.fromPolar({ctor: "_Tuple2",_0: labelRadius,_1: piAngle});
      var x3$ = _p10._0;
      var y3$ = _p10._1;
      return A2($Svg.g,
      _U.list([]),
      _U.list([A2($Svg.line,
              _U.list([$Svg$Attributes.x1($Basics.toString(x1$ + _p11))
                      ,$Svg$Attributes.y1($Basics.toString(y1$ + _p12))
                      ,$Svg$Attributes.x2($Basics.toString(x2$ + _p11))
                      ,$Svg$Attributes.y2($Basics.toString(y2$ + _p12))
                      ,$Svg$Attributes.$class($Basics.toString(piAngle))
                      ,$Svg$Attributes.style(A2($Basics._op["++"],"stroke:",A2($Basics._op["++"],style.segmentColor,";stroke-width:2")))]),
              _U.list([]))
              ,A2($Svg.text$,
              _U.list([$Svg$Attributes.x($Basics.toString(x3$ + _p11))
                      ,$Svg$Attributes.y($Basics.toString(y3$ + _p12 + 4))
                      ,$Svg$Attributes.textAnchor("middle")]),
              _U.list([$Svg.text($Basics.toString(labelValue))]))]));
   });
   var knobHandle = F4(function (properties,style,range,_p13) {
      var _p14 = _p13;
      var _p16 = _p14._1;
      var _p15 = _p14._0;
      var currentValuePercentage = $Basics.toFloat(properties.value) / $Basics.toFloat(properties.maxValue);
      var currentRangeValue = _U.cmp(properties.rangeAngleMin,properties.rangeAngleMax) > -1 ? A3($Basics.clamp,
      properties.rangeAngleMin,
      360 + properties.rangeAngleMax,
      currentValuePercentage * range + properties.rangeAngleMin) : A3($Basics.clamp,
      properties.rangeAngleMin,
      properties.rangeAngleMax,
      currentValuePercentage * range + properties.rangeAngleMin);
      return A2($Svg.g,
      _U.list([$Svg$Attributes.transform(A2($Basics._op["++"],
      "rotate(",
      A2($Basics._op["++"],
      $Basics.toString(currentRangeValue),
      A2($Basics._op["++"]," ",A2($Basics._op["++"],$Basics.toString(_p15),A2($Basics._op["++"],",",A2($Basics._op["++"],$Basics.toString(_p16),")")))))))]),
      _U.list([A2($Svg.circle,
              _U.list([$Svg$Attributes.cx($Basics.toString(_p15))
                      ,$Svg$Attributes.cy($Basics.toString(_p16))
                      ,$Svg$Attributes.r("112")
                      ,$Svg$Attributes.fill(style.knobColor)]),
              _U.list([]))
              ,A2($Svg.circle,
              _U.list([$Svg$Attributes.cx($Basics.toString(_p15 + 90))
                      ,$Svg$Attributes.cy($Basics.toString(_p16))
                      ,$Svg$Attributes.r("10")
                      ,$Svg$Attributes.fill(style.knobPointerColor)]),
              _U.list([]))]));
   });
   var knob = F2(function (properties,style) {
      var range = _U.cmp(properties.rangeAngleMin,
      properties.rangeAngleMax) > -1 ? 360 - properties.rangeAngleMin + properties.rangeAngleMax : properties.rangeAngleMax - properties.rangeAngleMin;
      var smallSegments = properties.smallSegments;
      var segments = properties.segments;
      var barAngle = range / $Basics.toFloat(segments);
      var barAngles = A2($List.map,function (a) {    return $Basics.toFloat(a) * barAngle;},_U.range(0,properties.segments));
      var smallBarAngle = range / $Basics.toFloat(segments + smallSegments);
      var barSmallAngles = A2($List.map,
      function (a) {
         return $Basics.toFloat(a) * smallBarAngle;
      },
      _U.range(0,properties.smallSegments + properties.segments));
      var labelValuePerUnit = $Basics.toFloat(properties.maxValue) / $Basics.toFloat(segments);
      var labelValues = A2($List.map,function (s) {    return $Basics.round($Basics.toFloat(s) * labelValuePerUnit);},_U.range(0,segments));
      var centerY = 340 / 2;
      var centerX = 340 / 2;
      var smallBarHeight = 7;
      var barHeight = 15;
      var radius = 120;
      var middleRadius = radius + smallBarHeight;
      var largeRadius = radius + barHeight;
      var containerHeight = 340;
      var containerWidth = 340;
      return A2($Svg.svg,
      _U.list([$Svg$Attributes.version("1.1")
              ,$Svg$Attributes.$class($Basics.toString(range))
              ,$Svg$Attributes.height("100%")
              ,$Svg$Attributes.width("100%")
              ,$Svg$Attributes.x("0")
              ,$Svg$Attributes.y("0")
              ,$Svg$Attributes.viewBox(A2($Basics._op["++"],
              "0 0 ",
              A2($Basics._op["++"],$Basics.toString(containerWidth),A2($Basics._op["++"]," ",$Basics.toString(containerHeight)))))]),
      A2($Basics._op["++"],
      A3($List.map2,A5(knobSegmentWithLabel,properties,style,radius,largeRadius,{ctor: "_Tuple2",_0: centerX,_1: centerY}),barAngles,labelValues),
      A2($Basics._op["++"],
      A2($List.map,A5(knobSegment,properties,style,radius,middleRadius,{ctor: "_Tuple2",_0: centerX,_1: centerY}),barSmallAngles),
      _U.list([A4(knobHandle,properties,style,range,{ctor: "_Tuple2",_0: centerX,_1: centerY})]))));
   });
   var simulatedAnalogMeterPointer = F2(function (properties,style) {
      var percentage = A3($Basics.clamp,-50,50,$Basics.toFloat(properties.currentValue) / $Basics.toFloat(properties.maxValue) * 100 - 50);
      return A2($Svg.g,
      _U.list([$Svg$Attributes.transform(A2($Basics._op["++"],"rotate(",A2($Basics._op["++"],$Basics.toString(percentage)," 204,300)")))]),
      _U.list([A2($Svg.polygon,_U.list([$Svg$Attributes.points("199,300 203,62 205,62 209,300"),$Svg$Attributes.fill(style.foreColor)]),_U.list([]))]));
   });
   var simulatedAnalogMeterSmallBar = F6(function (x$,y$,rotation,percentage,properties,style) {
      var valueToCheck = percentage * $Basics.toFloat(properties.maxValue);
      var ranges = properties.ranges;
      var getRange = A2($List.filter,function (r) {    return _U.cmp(r.minValue,valueToCheck) < 1 && _U.cmp(valueToCheck,r.maxValue) < 1;},ranges);
      var rangeFound = A2($List.take,1,getRange);
      var foreColor = function () {
         var _p17 = rangeFound;
         if (_p17.ctor === "::" && _p17._1.ctor === "[]") {
               return _U.cmp($Basics.toFloat(properties.currentValue),valueToCheck) < 1 ? style.foreColor : _p17._0.color;
            } else {
               return style.foreColor;
            }
      }();
      var width$ = 6;
      var height$ = 10;
      return A2($Svg.rect,
      _U.list([$Svg$Attributes.x($Basics.toString(x$))
              ,$Svg$Attributes.y($Basics.toString(y$))
              ,$Svg$Attributes.fill(foreColor)
              ,$Svg$Attributes.width($Basics.toString(width$))
              ,$Svg$Attributes.height($Basics.toString(height$))
              ,$Svg$Attributes.transform(A2($Basics._op["++"],
              "rotate(",
              A2($Basics._op["++"],
              $Basics.toString(rotation),
              A2($Basics._op["++"],
              " ",
              A2($Basics._op["++"],
              $Basics.toString(x$ + (width$ - 10) / 2),
              A2($Basics._op["++"],",",A2($Basics._op["++"],$Basics.toString(y$ + height$ / 2),")")))))))]),
      _U.list([]));
   });
   var simulatedAnalogMeterBar = F6(function (x$,y$,rotation,percentage,properties,style) {
      var valueToCheck = percentage * $Basics.toFloat(properties.maxValue);
      var ranges = properties.ranges;
      var getRange = A2($List.filter,function (r) {    return _U.cmp(r.minValue,valueToCheck) < 1 && _U.cmp(valueToCheck,r.maxValue) < 1;},ranges);
      var rangeFound = A2($List.take,1,getRange);
      var foreColor = function () {
         var _p18 = rangeFound;
         if (_p18.ctor === "::" && _p18._1.ctor === "[]") {
               return _U.cmp($Basics.toFloat(properties.currentValue),valueToCheck) < 1 ? style.foreColor : _p18._0.color;
            } else {
               return style.foreColor;
            }
      }();
      var width$ = 8;
      var height$ = 20;
      return A2($Svg.rect,
      _U.list([$Svg$Attributes.x($Basics.toString(x$))
              ,$Svg$Attributes.y($Basics.toString(y$))
              ,$Svg$Attributes.fill(foreColor)
              ,$Svg$Attributes.width($Basics.toString(width$))
              ,$Svg$Attributes.height($Basics.toString(height$))
              ,$Svg$Attributes.transform(A2($Basics._op["++"],
              "rotate(",
              A2($Basics._op["++"],
              $Basics.toString(rotation),
              A2($Basics._op["++"],
              " ",
              A2($Basics._op["++"],
              $Basics.toString(x$ + (width$ - 10) / 2),
              A2($Basics._op["++"],",",A2($Basics._op["++"],$Basics.toString(y$ + height$ / 2),")")))))))]),
      _U.list([]));
   });
   var simulatedAnalogMeterLabel = F7(function (x$,y$,rotation,percentage,labelPercentage,properties,style) {
      var labelPercentageValue = labelPercentage * $Basics.toFloat(properties.maxValue);
      var valueToCheck = percentage * $Basics.toFloat(properties.maxValue);
      var ranges = properties.ranges;
      var getRange = A2($List.filter,function (r) {    return _U.cmp(r.minValue,valueToCheck) < 1 && _U.cmp(valueToCheck,r.maxValue) < 1;},ranges);
      var rangeFound = A2($List.take,1,getRange);
      var foreColor = function () {
         var _p19 = rangeFound;
         if (_p19.ctor === "::" && _p19._1.ctor === "[]") {
               return _U.cmp($Basics.toFloat(properties.currentValue),valueToCheck) < 1 ? style.foreColor : _p19._0.color;
            } else {
               return style.foreColor;
            }
      }();
      return A2($Svg.text$,
      _U.list([$Svg$Attributes.x($Basics.toString(x$))
              ,$Svg$Attributes.y($Basics.toString(y$))
              ,$Svg$Attributes.fill(foreColor)
              ,$Svg$Attributes.$class($Basics.toString(properties.currentValue))
              ,$Svg$Attributes.textAnchor("middle")
              ,$Svg$Attributes.transform(A2($Basics._op["++"],
              "rotate(",
              A2($Basics._op["++"],
              $Basics.toString(rotation),
              A2($Basics._op["++"],
              " ",
              A2($Basics._op["++"],$Basics.toString(x$),A2($Basics._op["++"],",",A2($Basics._op["++"],$Basics.toString(y$),")")))))))]),
      _U.list([$Svg.text($Basics.toString(labelPercentageValue))]));
   });
   var simulatedAnalogMeterLabels = F2(function (properties,style) {
      return A2($Svg.g,
      _U.list([]),
      _U.list([A7(simulatedAnalogMeterLabel,-10,110,-45,0,0,properties,style)
              ,A7(simulatedAnalogMeterLabel,97,47,-24,0.244,0.25,properties,style)
              ,A7(simulatedAnalogMeterLabel,202,30,0,0.49,0.5,properties,style)
              ,A7(simulatedAnalogMeterLabel,312,51,24,0.749,0.75,properties,style)
              ,A7(simulatedAnalogMeterLabel,416,114,45,0.99,1,properties,style)]));
   });
   var simulatedAnalogMeterBars = F2(function (properties,style) {
      return A2($Svg.g,
      _U.list([]),
      _U.list([A6(simulatedAnalogMeterBar,0.0,114,-45,0,properties,style)
              ,A6(simulatedAnalogMeterSmallBar,25,97,-37,6.2e-2,properties,style)
              ,A6(simulatedAnalogMeterSmallBar,50,79,-34,0.125,properties,style)
              ,A6(simulatedAnalogMeterSmallBar,75,67,-30,0.187,properties,style)
              ,A6(simulatedAnalogMeterBar,100,54,-24,0.249,properties,style)
              ,A6(simulatedAnalogMeterSmallBar,125,50,-18,0.312,properties,style)
              ,A6(simulatedAnalogMeterSmallBar,150,45,-11,0.375,properties,style)
              ,A6(simulatedAnalogMeterSmallBar,175,42,-6,0.437,properties,style)
              ,A6(simulatedAnalogMeterBar,200,38,0,0.499,properties,style)
              ,A6(simulatedAnalogMeterSmallBar,225,42,6,0.562,properties,style)
              ,A6(simulatedAnalogMeterSmallBar,250,45,11,0.625,properties,style)
              ,A6(simulatedAnalogMeterSmallBar,275,50,18,0.687,properties,style)
              ,A6(simulatedAnalogMeterBar,300,54,24,0.75,properties,style)
              ,A6(simulatedAnalogMeterSmallBar,325,67,30,0.812,properties,style)
              ,A6(simulatedAnalogMeterSmallBar,350,79,34,0.875,properties,style)
              ,A6(simulatedAnalogMeterSmallBar,375,97,37,0.937,properties,style)
              ,A6(simulatedAnalogMeterBar,400,114,45,0.999,properties,style)]));
   });
   var simulatedAnalogMeter = F2(function (properties,style$) {
      var containerHeight = 200;
      var containerWidth = 400;
      return A2($Svg.svg,
      _U.list([$Svg$Attributes.style("background:#000")
              ,$Svg$Attributes.version("1.1")
              ,$Svg$Attributes.height("100%")
              ,$Svg$Attributes.width("100%")
              ,$Svg$Attributes.x("0")
              ,$Svg$Attributes.y("0")
              ,$Svg$Attributes.viewBox(A2($Basics._op["++"],
              "0 0 ",
              A2($Basics._op["++"],$Basics.toString(containerWidth),A2($Basics._op["++"]," ",$Basics.toString(containerHeight)))))]),
      _U.list([A2($Svg.rect,
              _U.list([$Svg$Attributes.fill(style$.backgroundColor)
                      ,$Svg$Attributes.x("2")
                      ,$Svg$Attributes.width($Basics.toString(containerWidth))
                      ,$Svg$Attributes.height($Basics.toString(containerHeight))]),
              _U.list([]))
              ,A2(simulatedAnalogMeterBars,properties,style$)
              ,A2(simulatedAnalogMeterLabels,properties,style$)
              ,A2(simulatedAnalogMeterPointer,properties,style$)]));
   });
   var segmentedBarGraphBar = F4(function (_p20,properties,style,index) {
      var _p21 = _p20;
      var _p23 = _p21._0;
      var ranges = properties.ranges;
      var barValue = $Basics.toFloat(index) / $Basics.toFloat(properties.segments) * $Basics.toFloat(properties.maxValue);
      var getRange = A2($List.filter,function (r) {    return _U.cmp(r.minValue,barValue) < 1 && _U.cmp(barValue,r.maxValue) < 1;},ranges);
      var rangeFound = A2($List.take,1,getRange);
      var barColor = function () {
         var _p22 = rangeFound;
         if (_p22.ctor === "::" && _p22._1.ctor === "[]") {
               return _U.cmp($Basics.toFloat(properties.currentValue),barValue) < 1 ? style.emptyColor : _p22._0.color;
            } else {
               return style.emptyColor;
            }
      }();
      var transformAttribute = $Svg$Attributes.transform(A2($Basics._op["++"],"translate(",A2($Basics._op["++"],$Basics.toString(_p23 * index + 4)," 8)")));
      return A2($Svg.rect,
      A2($Basics._op["++"],
      _U.list([transformAttribute]),
      _U.list([$Svg$Attributes.$class($Basics.toString(barValue))
              ,$Svg$Attributes.fill(barColor)
              ,$Svg$Attributes.width($Basics.toString(_p23 - 8))
              ,$Svg$Attributes.height($Basics.toString(_p21._1 - 16))])),
      _U.list([]));
   });
   var segmentedBarGraph = F2(function (properties,style) {
      var containerHeight = 340;
      var barWidth = 100;
      return A2($Svg.svg,
      _U.list([$Svg$Attributes.version("1.1")
              ,$Svg$Attributes.height("100%")
              ,$Svg$Attributes.width("100%")
              ,$Svg$Attributes.x("0")
              ,$Svg$Attributes.y("0")
              ,$Svg$Attributes.viewBox(A2($Basics._op["++"],
              "0 0 ",
              A2($Basics._op["++"],$Basics.toString(barWidth * properties.segments),A2($Basics._op["++"]," ",$Basics.toString(containerHeight)))))]),
      A2($Basics._op["++"],
      _U.list([A2($Svg.rect,_U.list([$Svg$Attributes.fill(style.backgroundColor),$Svg$Attributes.width("100%"),$Svg$Attributes.height("340")]),_U.list([]))]),
      A2($List.map,A3(segmentedBarGraphBar,{ctor: "_Tuple2",_0: barWidth,_1: containerHeight},properties,style),_U.range(0,properties.segments - 1))));
   });
   var seventSegmentColon = F3(function (style,containerWidth,index) {
      return A2($Svg.g,
      _U.list([]),
      _U.list([A2($Svg.circle,
              _U.list([$Svg$Attributes.cx($Basics.toString((index + 1) * containerWidth))
                      ,$Svg$Attributes.cy("110")
                      ,$Svg$Attributes.r("16")
                      ,$Svg$Attributes.fill(style.textColor)]),
              _U.list([]))
              ,A2($Svg.circle,
              _U.list([$Svg$Attributes.cx($Basics.toString((index + 1) * containerWidth))
                      ,$Svg$Attributes.cy("230")
                      ,$Svg$Attributes.r("16")
                      ,$Svg$Attributes.fill(style.textColor)]),
              _U.list([]))]));
   });
   var seventSegmentColons = F3(function (style,_p24,indexes) {    var _p25 = _p24;return A2($List.map,A2(seventSegmentColon,style,_p25._0),indexes);});
   var sevenSegmentPoint = F3(function (style,containerWidth,index) {
      return A2($Svg.g,
      _U.list([]),
      _U.list([A2($Svg.circle,
      _U.list([$Svg$Attributes.cx($Basics.toString((index + 1) * containerWidth))
              ,$Svg$Attributes.cy("300")
              ,$Svg$Attributes.r("16")
              ,$Svg$Attributes.fill(style.textColor)]),
      _U.list([]))]));
   });
   var sevenSegmentPoints = F3(function (style,_p26,indexes) {    var _p27 = _p26;return A2($List.map,A2(sevenSegmentPoint,style,_p27._0),indexes);});
   var sevenSegmentDigitPolygon = F5(function (properties,style,points$,attributes,isOn) {
      var element = isOn ? A2($Svg.polygon,
      A2($Basics._op["++"],_U.list([$Svg$Attributes.points(points$),$Svg$Attributes.fill(style.textColor)]),attributes),
      _U.list([])) : properties.isDimmedWhenOff ? A2($Svg.g,
      _U.list([]),
      _U.list([A2($Svg.polygon,A2($Basics._op["++"],_U.list([$Svg$Attributes.points(points$),$Svg$Attributes.fill(style.textColor)]),attributes),_U.list([]))
              ,A2($Svg.polygon,
              A2($Basics._op["++"],_U.list([$Svg$Attributes.points(points$),$Svg$Attributes.fill("#000"),$Svg$Attributes.opacity("0.8")]),attributes),
              _U.list([]))])) : A2($Svg.g,_U.list([]),_U.list([]));
      return element;
   });
   var sevenSegmentDigit = F5(function (properties,style,_p28,index,digit) {
      var _p29 = _p28;
      var transformAttribute = $Svg$Attributes.transform(A2($Basics._op["++"],"translate(",A2($Basics._op["++"],$Basics.toString(_p29._0 * index)," 0)")));
      var newForegroundAttribute = _U.list([transformAttribute]);
      var segmentA = function (isOn) {
         return A5(sevenSegmentDigitPolygon,
         properties,
         style,
         " 39.6,  35.4   52.5,  22.1  145.0,  22.1  157.0,  35.4  145.0,  48.2   52.5,  48.2",
         newForegroundAttribute,
         isOn);
      };
      var segmentB = function (isOn) {
         return A5(sevenSegmentDigitPolygon,
         properties,
         style,
         "151.4,  53.1  164.3,  41.8  175.5,  53.1  175.5, 150.8  163.5, 163.2  151.4, 151.2",
         newForegroundAttribute,
         isOn);
      };
      var segmentC = function (isOn) {
         return A5(sevenSegmentDigitPolygon,
         properties,
         style,
         "163.5, 176.5  175.5, 187.8  175.5, 285.5  163.5, 296.7  151.4, 283.4  151.4, 188.6",
         newForegroundAttribute,
         isOn);
      };
      var segmentD = function (isOn) {
         return A5(sevenSegmentDigitPolygon,
         properties,
         style,
         "145.4, 291.1  157.0, 303.9  145.4, 316.0   52.9, 316     40.0, 305.2   52.1, 291.1",
         newForegroundAttribute,
         isOn);
      };
      var segmentE = function (isOn) {
         return A5(sevenSegmentDigitPolygon,
         properties,
         style,
         " 45.2, 284.2   33.6, 296.7   22.3, 284.2   22.3, 188.6   33.8, 176.5   45.2, 187.8",
         newForegroundAttribute,
         isOn);
      };
      var segmentF = function (isOn) {
         return A5(sevenSegmentDigitPolygon,
         properties,
         style,
         " 33.8, 163.2   22.3, 150.4   22.3,  53.9   33.8,  41.8   45.2,  53.9   47.3, 150  ",
         newForegroundAttribute,
         isOn);
      };
      var segmentG = function (isOn) {
         return A5(sevenSegmentDigitPolygon,
         properties,
         style,
         " 39.6, 170     51.7, 156.8  146.2, 156.8  157.0, 170    145.8, 182.9   52.1, 182.9",
         newForegroundAttribute,
         isOn);
      };
      var segment = F7(function (a,b,c,d,e,f,g) {    return _U.list([segmentA(a),segmentB(b),segmentC(c),segmentD(d),segmentE(e),segmentF(f),segmentG(g)]);});
      var polygons = function () {
         var _p30 = digit;
         switch (_p30.valueOf())
         {case "0": return A7(segment,true,true,true,true,true,true,false);
            case "1": return A7(segment,false,true,true,false,false,false,false);
            case "2": return A7(segment,true,true,false,true,true,false,true);
            case "3": return A7(segment,true,true,true,true,false,false,true);
            case "4": return A7(segment,false,true,true,false,false,true,true);
            case "5": return A7(segment,true,false,true,true,false,true,true);
            case "6": return A7(segment,true,false,true,true,true,true,true);
            case "7": return A7(segment,true,true,true,false,false,false,false);
            case "8": return A7(segment,true,true,true,true,true,true,true);
            case "9": return A7(segment,true,true,true,true,false,true,true);
            case " ": return _U.list([]);
            default: return A7(segment,false,false,false,false,false,false,false);}
      }();
      return A2($Svg.g,_U.list([]),polygons);
   });
   var sevenSegment = F2(function (properties,style) {
      var digitLength = $String.length(properties.digits);
      var containerHeight = 340;
      var containerWidth = 200;
      return A2($Svg.svg,
      _U.list([$Svg$Attributes.version("1.1")
              ,$Svg$Attributes.height("100%")
              ,$Svg$Attributes.width("100%")
              ,$Svg$Attributes.x("0")
              ,$Svg$Attributes.y("0")
              ,$Svg$Attributes.viewBox(A2($Basics._op["++"],
              "0 0 ",
              A2($Basics._op["++"],$Basics.toString(containerWidth * digitLength),A2($Basics._op["++"]," ",$Basics.toString(containerHeight)))))]),
      A2($Basics._op["++"],
      _U.list([A2($Svg.rect,
      _U.list([$Svg$Attributes.x("0")
              ,$Svg$Attributes.y("0")
              ,$Svg$Attributes.width($Basics.toString(containerWidth * digitLength))
              ,$Svg$Attributes.height($Basics.toString(containerHeight))
              ,$Svg$Attributes.fill(style.backgroundColor)]),
      _U.list([]))]),
      A2($Basics._op["++"],
      A2($List.indexedMap,A3(sevenSegmentDigit,properties,style,{ctor: "_Tuple2",_0: containerWidth,_1: containerHeight}),$String.toList(properties.digits)),
      A2($Basics._op["++"],
      A3(sevenSegmentPoints,style,{ctor: "_Tuple2",_0: containerWidth,_1: containerHeight},properties.pointIndexes),
      A3(seventSegmentColons,style,{ctor: "_Tuple2",_0: containerWidth,_1: containerHeight},properties.colonIndexes)))));
   });
   var defaultMeterRangeAlert = {color: "#F00",minValue: 50.0,maxValue: 100};
   var defaultMeterRangeOk = {color: "#0F0",minValue: 0,maxValue: 50};
   var defaultKnobStyle = {segmentColor: "#F44",knobColor: "#444",knobPointerColor: "#F44"};
   var defaultKnobProperties = {segments: 20,smallSegments: 60,rangeAngleMin: 160,rangeAngleMax: 20,value: 0,maxValue: 100};
   var defaultSimulatedAnalogMeterStyle = {foreColor: "#fff",backgroundColor: "#000"};
   var defaultSimulatedAnalogMeterProperties = {currentValue: 50,maxValue: 100,ranges: _U.list([defaultMeterRangeOk,defaultMeterRangeAlert])};
   var defaultSegmentBarGraphStyle = {emptyColor: "#444",backgroundColor: "#000"};
   var defaultSegmentedBarGraphProperties = {currentValue: 70,maxValue: 100,segments: 50,ranges: _U.list([defaultMeterRangeOk,defaultMeterRangeAlert])};
   var defaultSevenSegmentStyle = {backgroundColor: "#000",textColor: "#0F0"};
   var defaultSevenSegmentProperties = {digits: "1234 4567890",pointIndexes: _U.list([7]),colonIndexes: _U.list([1]),isSlant: false,isDimmedWhenOff: true};
   var MeterRange = F3(function (a,b,c) {    return {color: a,minValue: b,maxValue: c};});
   var KnobStyle = F3(function (a,b,c) {    return {segmentColor: a,knobColor: b,knobPointerColor: c};});
   var KnobProperties = F6(function (a,b,c,d,e,f) {    return {value: a,maxValue: b,segments: c,smallSegments: d,rangeAngleMin: e,rangeAngleMax: f};});
   var SimulatedAnalogMeterStyle = F2(function (a,b) {    return {foreColor: a,backgroundColor: b};});
   var SimulatedAnalogMeterProperties = F3(function (a,b,c) {    return {currentValue: a,maxValue: b,ranges: c};});
   var SegmentedBarGraphStyle = F2(function (a,b) {    return {emptyColor: a,backgroundColor: b};});
   var SegmentedBarGraphProperties = F4(function (a,b,c,d) {    return {currentValue: a,maxValue: b,segments: c,ranges: d};});
   var SevenSegmentStyle = F2(function (a,b) {    return {backgroundColor: a,textColor: b};});
   var SevenSegmentProperties = F5(function (a,b,c,d,e) {    return {digits: a,pointIndexes: b,colonIndexes: c,isSlant: d,isDimmedWhenOff: e};});
   return _elm.Html.Widgets.values = {_op: _op
                                     ,sevenSegment: sevenSegment
                                     ,defaultSevenSegmentProperties: defaultSevenSegmentProperties
                                     ,defaultSevenSegmentStyle: defaultSevenSegmentStyle
                                     ,segmentedBarGraph: segmentedBarGraph
                                     ,defaultSegmentedBarGraphProperties: defaultSegmentedBarGraphProperties
                                     ,defaultSegmentBarGraphStyle: defaultSegmentBarGraphStyle
                                     ,simulatedAnalogMeter: simulatedAnalogMeter
                                     ,defaultSimulatedAnalogMeterProperties: defaultSimulatedAnalogMeterProperties
                                     ,defaultSimulatedAnalogMeterStyle: defaultSimulatedAnalogMeterStyle
                                     ,knob: knob
                                     ,defaultKnobProperties: defaultKnobProperties
                                     ,defaultKnobStyle: defaultKnobStyle
                                     ,defaultMeterRangeOk: defaultMeterRangeOk
                                     ,defaultMeterRangeAlert: defaultMeterRangeAlert
                                     ,SevenSegmentProperties: SevenSegmentProperties
                                     ,SevenSegmentStyle: SevenSegmentStyle
                                     ,SegmentedBarGraphProperties: SegmentedBarGraphProperties
                                     ,SegmentedBarGraphStyle: SegmentedBarGraphStyle
                                     ,SimulatedAnalogMeterProperties: SimulatedAnalogMeterProperties
                                     ,SimulatedAnalogMeterStyle: SimulatedAnalogMeterStyle
                                     ,KnobProperties: KnobProperties
                                     ,KnobStyle: KnobStyle
                                     ,MeterRange: MeterRange};
};